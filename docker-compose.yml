
version: "3.8"
services:

  nginx:
    container_name: astro-nginx
    image: nginx:latest
    volumes:
      -  ./default.conf:/etc/nginx/conf.d/default.conf:ro
    command: ["nginx-debug",'-g','daemon off;']
    ports:
      - ${NGINX_ACCESS_PORT}:80
    networks:
      - astro_network


  ## MYSQL DOCKER COMPOSE CONFIG
  postgres-clinic:
    container_name: prostgres-clinic
    image: postgres
    environment:
      POSTGRES_DB: clinic
      POSTGRES_USER: astromyllc
      POSTGRES_PASSWORD: ${PS}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-clinic:/data/postgres
    healthcheck:
      test: "exit 0"
    expose:
      - 5431
    ports:
      - 5431:5431
    command: -p 5431
    restart: unless-stopped
    networks:
      - astro_network


  postgres-shootingstar_academics:
    container_name: prostgres-shootingstar_academics
    image: postgres
    environment:
      POSTGRES_DB: shootingstar_academics
      POSTGRES_USER: astromyllc
      POSTGRES_PASSWORD: ${PS}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-shootingstar_academics:/data/postgres
    healthcheck:
      test: "exit 0"
    expose:
      - 5432
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - astro_network


  postgres-shootingstarfinance:
    container_name: prostgres-shootingstarfinance
    image: postgres
    environment:
      POSTGRES_DB: shootingstarfinance
      POSTGRES_USER: astromyllc
      POSTGRES_PASSWORD: ${PS}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-shootingstarfinance:/data/postgres
    healthcheck:
      test: "exit 0"
    expose:
      - 5433
    ports:
      - 5433:5433
    command: -p 5433
    restart: unless-stopped
    networks:
      - astro_network


  postgres-shootingstarsetup:
    container_name: prostgres-shootingstarsetup
    image: postgres
    environment:
      POSTGRES_DB: shootingstarsetup
      POSTGRES_USER: astromyllc
      POSTGRES_PASSWORD: ${PS}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-shootingstarsetup:/data/postgres
    healthcheck:
      test: "exit 0"
    expose:
      - 5434
    ports:
      - 5434:5434
    command: -p 5434
    restart: unless-stopped
    networks:
      - astro_network


  ## MONGO DOCKER COMPOSE
  mongo-administration-pta:
    container_name: mongo_administration-pta
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    expose:
      - 27017
    ports:
      - 27017:27017
    healthcheck:
      test: "exit 0"
    volumes:
      - ./mongo-data_administration-pta:/data/db
    networks:
      - astro_network


  mongo-hr-service:
    container_name: mongo_hr-service
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    expose:
      - 27018
    ports:
      - 27018:27018
    command: mongod --port 27018
    healthcheck:
      test: "exit 0"
    volumes:
      - ./mongo-data_hr-service:/data/db
    networks:
      - astro_network


  mongo-online-application:
    container_name: mongo_online-application
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    expose:
      - 27019
    ports:
      - 27019:27019
    command: mongod --port 27019
    healthcheck:
      test: "exit 0"
    volumes:
      - ./mongo-data_online-application:/data/db
    networks:
      - astro_network



  ## KEYCLOAK DOCKER COMPOSE
  keycloak-postgres:
    container_name: keycloak-postgres
    image: postgres
    volumes:
      - ./mysql_keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${PS}
    expose:
      - 5435
    ports:
      - 5435:5435
    restart: unless-stopped
    healthcheck:
      test: "exit 0"
    networks:
      - astro_network


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.4
    command: ["start-dev","--import-realm"]
    environment:
      KEYCLOAK_LOGLEVEL: DEBUG
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_PASSWORD: ${PS}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${PS}
      KC_PROXY: edge
      #KC_HOSTNAME_URL: http://${PUBLIC_IP_ADDRESS}:${NGINX_ACCESS_PORT}
      #KC_HOSTNAME_ADMIN_URL: http://${PUBLIC_IP_ADDRESS}:${NGINX_ACCESS_PORT}
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      #KEYCLOAK_HTTP_PORT: 8090
    expose:
      - "8080"
    ports:
      - "8080:8080"
    healthcheck:
      test: "exit 0"
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - astro_network

  ##ZIPKIN DOCKER COMPOSE
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    expose:
      - 9411
    ports:
     - 9411:9411
    healthcheck:
      test: "exit 0"
    networks:
      - astro_network

  ##MAIN MICROSERVICES DOCKER COMPOSE
 # discovery-server:
 # astro-orb:
 # astro-preorder:
 # astro-api-gateway:
 # clinic:
 # academics:
 # finance:
 # shootingstar_setup:
 # hr-service:
 # online-application:
 # administration-pta:


  ## Eureka Server

  discovery-server:
    image: astromyllc/discoveryserver:0.003
    container_name: discovery-server
    pull_policy: always
    ports:
      - 8761:8761
    expose:
     - 8761
    environment:
     - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
     test: "exit 0"
    depends_on:
      zipkin:
        condition: service_healthy
    networks:
      - astro_network

  astro-orb:
    image: astromyllc/astro-orb:0.003
    container_name: astro-orb
    pull_policy: always
    ports:
      - 7013:7013
    expose:
      - 7013
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "exit 0"
    depends_on:
      keycloak:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network


  astro-preorder:
    image: astromyllc/astro-preorder:0.003
    container_name: astro-preorder
    pull_policy: always
    ports:
      - 3017:3017
    expose:
      - 3017
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "exit 0"
    depends_on:
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network




  astro-api-gateway:
    image: astromyllc/astro-api-gateway:0.003
    container_name: astro-api-gateway
    pull_policy: always
    ports:
      - 8083:8083
    expose:
      - 8083
    command: ["-p","8083"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    healthcheck:
      test: "exit 0"
    depends_on:
      keycloak:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - astro_network


   ## Clinic Service

  clinic:
    image: astromyllc/clinic:0.003
    container_name: clinic
    pull_policy: always
    command: ["-p","1370"]
    expose:
      - 1370
    ports:
      - 1370:1370
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-clinic:5431/clinic
    healthcheck:
      test: "exit 0"
    depends_on:
      postgres-clinic:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network


## Academics Server
  academics:
    image: astromyllc/academics:0.003
    container_name: shootingStar-academics
    pull_policy: always
    command: ["-p","1371"]
    expose:
      - 1371
    ports:
      - 1371:1371
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-shootingstar_academics:5432/shootingstar_academics
    healthcheck:
      test: "exit 0"
    depends_on:
      postgres-shootingstar_academics:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
      administration-pta:
        condition: service_healthy
    networks:
      - astro_network



     ## Finance Service

  finance:
    image: astromyllc/finance:0.003
    container_name: finance
    pull_policy: always
    command: ["-p","1372"]
    expose:
      - 1372
    ports:
      - 1372:1372
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-shootingstarfinance:5433/shootingstarfinance
    healthcheck:
      test: "exit 0"
    depends_on:
      postgres-shootingstarfinance:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network



## SETUP Service
  shootingstar_setup:
    image: astromyllc/shootingstar_setup:0.003
    container_name: shootingStar-setup
    pull_policy: always
    command: ["-p","1373"]
    expose:
      - 1373
    ports:
      - 1373:1373
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-shootingstarsetup:5434/shootingstarsetup
    healthcheck:
      test: "exit 0"
    depends_on:
      zipkin:
        condition: service_healthy
      postgres-shootingstarsetup:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
    networks:
      - astro_network

  ## ASTROAUTHAUTH Service
 # astroauthauth:
 #   image: astromyllc/astroauthauth:0.003
 #   container_name: astroauthauth
 #   pull_policy: always
 #   command: ["-p","7013"]
 #   ports:
 #     - "7013:7013"
 #   environment:
 #     - SPRING_PROFILES_ACTIVE=docker
 #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-astroauthauth:7031/astroauthauth
 #   healthcheck:
 #     test: "exit 0"
 #   depends_on:
 #     zipkin:
 #       condition: service_healthy
 #    postgres-astroauthauth:
 #       condition: service_healthy
 #     discovery-server:
 #       condition: service_healthy
 #     astro-api-gateway:
 #       condition: service_healthy
 #   networks:
 #     - astro_network


### MONGO DB BASED SERVICES

## HR-Service Docker Compose Config
  hr-service:
    container_name: HR-Service
    image: astromyllc/hr-service:0.003
    pull_policy: always
    command: ["-p","1374"]
    expose:
      - 1374
    ports:
      - 1374:1374
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "exit 0"
    depends_on:
      mongo-hr-service:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network


  ## Online-Application-Service Docker Compose Config

  online-application:
    container_name: online-application
    image: astromyllc/online-application:0.003
    pull_policy: always
    command: ["-p","1375"]
    expose:
      - 1375
    ports:
      - 1375:1375
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "exit 0"
    depends_on:
      mongo-online-application:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network


   ## Administration-PTA-Service Docker Compose Config

  administration-pta:
    container_name: administration-pta
    image: astromyllc/administration-pta:0.003
    pull_policy: always
    command: ["-p","1376"]
    ports:
      - 1376:1376
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "exit 0"
    depends_on:
      mongo-administration-pta:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      astro-api-gateway:
        condition: service_healthy
      shootingstar_setup:
        condition: service_healthy
    networks:
      - astro_network


networks:
  astro_network:
    driver: bridge


